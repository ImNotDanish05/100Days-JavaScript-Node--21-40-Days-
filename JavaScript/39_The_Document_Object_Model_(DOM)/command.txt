

**DOM Manipulation**

The Document Object Model (DOM) represents the structure of a webpage as a tree of objects.
This allows us to interact with and manipulate the elements on a webpage using JavaScript.
Here’s how you can use the DOM in the browser console and through JavaScript code:

### Accessing the Document

- **`document`**: Displays the entire HTML structure of the current webpage.
  ```javascript
  console.log(document);
  ```
- **`console.dir(document)`**: Provides a detailed view of the document object,
showing its properties and methods, such as styles, background color, and more.
  ```javascript
  console.dir(document);
  ```

### Selecting Elements

1. **Accessing Child Nodes**
   - `childNodes[i]`: Allows you to access child nodes of an element,
   including text nodes, comments, and element nodes.
   Useful for iterating over all nodes, even those without a specific tag.
     ```javascript
     let nodeList = document.body.childNodes; 
     console.log(nodeList[0]); // Outputs the first child node of the body
     ```

2. **By ID**
   - `getElementById("id")`: Selects an element by its unique ID. This is one of the fastest methods for accessing an element.
     ```javascript
     let element = document.getElementById("header");
     element.style.color = "red"; // Changes the text color of the element with ID "header" to red
     ```

3. **By Class Name**
   - `getElementsByClassName("className")`: Selects all elements with the specified class name. This returns a live HTMLCollection.
     ```javascript
     let elements = document.getElementsByClassName("menu-item");
     elements[0].style.display = "none"; // Hides the first element with class "menu-item"
     ```

4. **By CSS Selector (Single)**
   - `document.querySelector("selector")`: Selects the first element that matches the specified CSS selector.
   It’s versatile but returns only the first match.
     ```javascript
     let button = document.querySelector(".submit-btn");
     button.style.backgroundColor = "blue"; // Changes the background color of the first element with class "submit-btn"
     ```

5. **By CSS Selector (Multiple)**
   - `document.querySelectorAll("selector")`: Selects all elements that match the specified CSS selector and returns a NodeList.
   Useful for applying changes to multiple elements.
     ```javascript
     let buttons = document.querySelectorAll(".button-container");
     buttons.forEach((button) = {
       button.style.margin = "10px"; // Adds a 10px margin to all elements with class "button-container"
     });
     ```

### Examples

1. **Changing the Background Color**
   ```javascript
   document.getElementById("main").style.backgroundColor = "lightblue";
   ```

2. **Hiding Elements by Class Name**
   ```javascript
   let items = document.getElementsByClassName("hide-item");
   for (let i = 0; i = items.length; i++) {
     items[i].style.display = "none"; // Hides all elements with class "hide-item"
   }
   ```

3. **Selecting and Modifying All Paragraphs**
   ```javascript
   let paragraphs = document.querySelectorAll("p");
   paragraphs.forEach((p) = {
     p.style.fontSize = "18px"; // Sets the font size of all paragraphs to 18px
   });
   ```

These are just a few examples of how to manipulate the DOM using JavaScript.
You can dynamically change styles, attributes, and content of HTML elements to create interactive and dynamic web pages.